// Trigger function for new form submission
function onFormSubmit(e) {
  var sheet = e.source.getActiveSheet();
  var row = e.range.getRow();
  
  // Get the values from the form response row
  var hostnamesCell = sheet.getRange(row, 1).getValue();  // Assuming hostnames are in column 1
  var adGroupsCell = sheet.getRange(row, 2).getValue();    // Assuming AD groups are in column 2
  var filePathsCell = sheet.getRange(row, 3).getValue();   // Assuming file paths are in column 3

  // Clean and split the values by spaces or commas
  var hostnames = cleanAndSplitInput(hostnamesCell);
  var adGroups = cleanAndSplitInput(adGroupsCell);
  var filePaths = cleanAndSplitInput(filePathsCell);

  // Create a Jira ticket for each combination of hostname, AD group, and file server path
  hostnames.forEach(function(hostname) {
    adGroups.forEach(function(adGroup) {
      filePaths.forEach(function(filePath) {
        // Construct the ticket summary and description
        var summary = 'New Issue for Hostname: ' + hostname;
        var description = 'Host: ' + hostname + '\nAD Group: ' + adGroup + '\nFile Path: ' + filePath;
        
        // Call the function to create Jira issue
        createJiraTicket(summary, description);
      });
    });
  });
}

// Function to clean and split the input based on multiple delimiters (spaces, commas)
function cleanAndSplitInput(input) {
  // Remove extra spaces at the beginning and end
  input = input.trim();
  
  // Replace spaces with commas to normalize
  input = input.replace(/\s+/g, ',');  // Replaces any sequence of spaces with commas
  
  // Split by comma to create an array and remove any empty elements
  return input.split(',').map(function(item) {
    return item.trim();  // Trim leading/trailing spaces from each item
  }).filter(function(item) {
    return item.length > 0;  // Remove any empty entries
  });
}

// Function to create a Jira ticket via Jira REST API
function createJiraTicket(summary, description) {
  var jiraUrl = 'https://yourcompany.atlassian.net';  // Jira instance URL
  var apiEndpoint = '/rest/api/2/issue';
  var username = 'your-email@example.com';  // Your Jira username (email)
  var apiToken = 'your-api-token';         // Your Jira API token
  
  // Prepare Jira issue data
  var issueData = {
    fields: {
      project: {
        key: 'YOUR_PROJECT_KEY'  // Project key (e.g., 'IT', 'DEV')
      },
      summary: summary,
      description: description,
      issuetype: {
        name: 'Task'  // You can change this to other issue types if needed
      }
    }
  };

  // Create a basic authentication header
  var encodedCredentials = Utilities.base64Encode(username + ':' + apiToken);
  
  var options = {
    method: 'post',
    headers: {
      'Authorization': 'Basic ' + encodedCredentials,
      'Content-Type': 'application/json'
    },
    payload: JSON.stringify(issueData)
  };
  
  // Make the API request to Jira
  var response = UrlFetchApp.fetch(jiraUrl + apiEndpoint, options);
  
  // Log the response (optional)
  Logger.log(response.getContentText());
}
